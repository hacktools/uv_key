;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 11/9/2016
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega328P
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*****************************************************/
;
;#include <mega328p.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;unsigned char TWIGetStatus(void);
;
;// Two Wire bus interrupt service routine
;unsigned char next_byte_to_transmit;
;unsigned char my_twi_address;
;
;interrupt [TWI] void twi_isr(void)
; 0000 0021 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0022 
; 0000 0023     // own address has been acknowledged; prepare to receive
; 0000 0024     if( TWIGetStatus() == 0x60 ) {
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0025         my_twi_address = TWDR;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0026     }
; 0000 0027 
; 0000 0028     // data receive successful
; 0000 0029     if( TWIGetStatus() == 0x80 ){
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 002A         unsigned char mem_addr = TWDR;
; 0000 002B         next_byte_to_transmit = mem_addr;//(mem_addr < buffer_size) ? buffer[mem_addr] : 255;
;PCODE: $00000018 VOL: 0
;	mem_addr -> Y+0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 002C     }
;PCODE: $0000001D VOL: 0
; 0000 002D 
; 0000 002E     // device has been addressed to be a transmitter
; 0000 002F     if( TWIGetStatus() == 0xB8 ){
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0030         TWDR = next_byte_to_transmit;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0031     }
; 0000 0032 
; 0000 0033     TWDR = 123;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0034     // if none of the above apply prepare TWI to be addressed again
; 0000 0035     //TWCR = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
; 0000 0036     //TWCR = 0xC5;
; 0000 0037     TWCR = (1<<TWIE) | (1<<TWEA) | (1<<TWEN);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0038 }
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;
;// Declare your global variables here
;
;unsigned char TWIGetStatus(void) {
; 0000 003C unsigned char TWIGetStatus(void) {
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 003D     return (TWSR & 0xF8);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 003E }
;PCODE: $00000031 VOL: 0
;
;
;void main(void)
; 0000 0042 {
;PCODE: $00000032 VOL: 0
; 0000 0043 // Declare your local variables here
; 0000 0044 
; 0000 0045 // Crystal Oscillator division factor: 1
; 0000 0046 #pragma optsize-
; 0000 0047 CLKPR=0x80;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0048 CLKPR=0x00;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0049 #ifdef _OPTIMIZE_SIZE_
; 0000 004A #pragma optsize+
; 0000 004B #endif
; 0000 004C 
; 0000 004D // Input/Output Ports initialization
; 0000 004E // Port B initialization
; 0000 004F // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0050 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0051 PORTB=0x00;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0052 DDRB=0x00;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0053 
; 0000 0054 // Port C initialization
; 0000 0055 // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0056 // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0057 PORTC=0xFF;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0058 DDRC=0xFF;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0059 
; 0000 005A // Port D initialization
; 0000 005B // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 005C // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 005D PORTD=0x00;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 005E DDRD=0x00;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 005F 
; 0000 0060 // Timer/Counter 0 initialization
; 0000 0061 // Clock source: System Clock
; 0000 0062 // Clock value: Timer 0 Stopped
; 0000 0063 // Mode: Normal top=0xFF
; 0000 0064 // OC0A output: Disconnected
; 0000 0065 // OC0B output: Disconnected
; 0000 0066 TCCR0A=0x00;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0067 TCCR0B=0x00;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0068 TCNT0=0x00;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0069 OCR0A=0x00;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 006A OCR0B=0x00;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 006B 
; 0000 006C // Timer/Counter 1 initialization
; 0000 006D // Clock source: System Clock
; 0000 006E // Clock value: Timer1 Stopped
; 0000 006F // Mode: Normal top=0xFFFF
; 0000 0070 // OC1A output: Discon.
; 0000 0071 // OC1B output: Discon.
; 0000 0072 // Noise Canceler: Off
; 0000 0073 // Input Capture on Falling Edge
; 0000 0074 // Timer1 Overflow Interrupt: Off
; 0000 0075 // Input Capture Interrupt: Off
; 0000 0076 // Compare A Match Interrupt: Off
; 0000 0077 // Compare B Match Interrupt: Off
; 0000 0078 TCCR1A=0x00;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0079 TCCR1B=0x00;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 007A TCNT1H=0x00;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 007B TCNT1L=0x00;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 007C ICR1H=0x00;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 007D ICR1L=0x00;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 007E OCR1AH=0x00;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 007F OCR1AL=0x00;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0080 OCR1BH=0x00;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0081 OCR1BL=0x00;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0082 
; 0000 0083 // Timer/Counter 2 initialization
; 0000 0084 // Clock source: System Clock
; 0000 0085 // Clock value: Timer2 Stopped
; 0000 0086 // Mode: Normal top=0xFF
; 0000 0087 // OC2A output: Disconnected
; 0000 0088 // OC2B output: Disconnected
; 0000 0089 ASSR=0x00;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 008A TCCR2A=0x00;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 008B TCCR2B=0x00;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 008C TCNT2=0x00;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 008D OCR2A=0x00;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 008E OCR2B=0x00;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 008F 
; 0000 0090 // External Interrupt(s) initialization
; 0000 0091 // INT0: Off
; 0000 0092 // INT1: Off
; 0000 0093 // Interrupt on any change on pins PCINT0-7: Off
; 0000 0094 // Interrupt on any change on pins PCINT8-14: Off
; 0000 0095 // Interrupt on any change on pins PCINT16-23: Off
; 0000 0096 EICRA=0x00;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0097 EIMSK=0x00;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0098 PCICR=0x00;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0099 
; 0000 009A // Timer/Counter 0 Interrupt(s) initialization
; 0000 009B TIMSK0=0x00;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 009C 
; 0000 009D // Timer/Counter 1 Interrupt(s) initialization
; 0000 009E TIMSK1=0x00;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 009F 
; 0000 00A0 // Timer/Counter 2 Interrupt(s) initialization
; 0000 00A1 TIMSK2=0x00;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 00A2 
; 0000 00A3 // USART initialization
; 0000 00A4 // USART disabled
; 0000 00A5 UCSR0B=0x00;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 00A6 
; 0000 00A7 // Analog Comparator initialization
; 0000 00A8 // Analog Comparator: Off
; 0000 00A9 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00AA ACSR=0x80;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 00AB ADCSRB=0x00;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 00AC DIDR1=0x00;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00AD 
; 0000 00AE // ADC initialization
; 0000 00AF // ADC disabled
; 0000 00B0 ADCSRA=0x00;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 00B1 
; 0000 00B2 // SPI initialization
; 0000 00B3 // SPI disabled
; 0000 00B4 SPCR=0x00;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 00B5 
; 0000 00B6 // TWI initialization
; 0000 00B7 // Bit Rate: 100.000 kHz
; 0000 00B8 TWBR=0x20;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00B9 // Two Wire Bus Slave Address: 0x57
; 0000 00BA // General Call Recognition: Off
; 0000 00BB TWAR=0xAE;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00BC // Generate Acknowledge Pulse: On
; 0000 00BD // TWI Interrupt: On
; 0000 00BE TWCR=0x45;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00BF TWSR=0x00;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00C0 
; 0000 00C1 // Global enable interrupts
; 0000 00C2 #asm("sei")
;PCODE: $0000008D VOL: 0
	sei
;PCODE: $0000008E VOL: 0
; 0000 00C3 
; 0000 00C4 while (1)
;PCODE: $0000008F VOL: 0
; 0000 00C5       {
; 0000 00C6       // Place your code here
; 0000 00C7         //TWCR=0xC5;
; 0000 00C8 
; 0000 00C9       }
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00CA }
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
