
cpp_firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  000001c8  0000025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800130  00800130  0000028c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dec  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ae1  00000000  00000000  00001188  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005a9  00000000  00000000  00001c69  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  00002214  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c9  00000000  00000000  00002364  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000012c  00000000  00000000  0000292d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002a59  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__vector_24>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e8 ec       	ldi	r30, 0xC8	; 200
  c8:	f1 e0       	ldi	r31, 0x01	; 1
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a0 33       	cpi	r26, 0x30	; 48
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a0 e3       	ldi	r26, 0x30	; 48
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a5 33       	cpi	r26, 0x35	; 53
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 c4 00 	call	0x188	; 0x188 <main>
  ea:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <configure>:
    //PORTD = 0;
    //DDRB = 0b00000111;
    //PORTB = 0;
    //DDRC = 0;
    //DDRC = 0b00000010;
    DDRC = 0;
  f2:	17 b8       	out	0x07, r1	; 7
    PORTC = 255;
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	88 b9       	out	0x08, r24	; 8
	
    // Interrupts
    sei();
  f8:	78 94       	sei
    
    // Init TWI
    TWISetBuffer(key_0, 48);
  fa:	60 e3       	ldi	r22, 0x30	; 48
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	91 e0       	ldi	r25, 0x01	; 1
 100:	0e 94 db 00 	call	0x1b6	; 0x1b6 <TWISetBuffer>
    TWISlaveInit(87, 6); // Answer on 84 or 87
 104:	66 e0       	ldi	r22, 0x06	; 6
 106:	87 e5       	ldi	r24, 0x57	; 87
 108:	0e 94 c9 00 	call	0x192	; 0x192 <TWISlaveInit>
 10c:	08 95       	ret

0000010e <__vector_24>:
    //blink();
}



ISR(TWI0_vect) {
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	2f 93       	push	r18
 11a:	3f 93       	push	r19
 11c:	4f 93       	push	r20
 11e:	5f 93       	push	r21
 120:	6f 93       	push	r22
 122:	7f 93       	push	r23
 124:	8f 93       	push	r24
 126:	9f 93       	push	r25
 128:	af 93       	push	r26
 12a:	bf 93       	push	r27
 12c:	ef 93       	push	r30
 12e:	ff 93       	push	r31
    
    // own address has been acknowledged; prepare to receive
    if( TWIGetStatus() == TW_SR_SLA_ACK ) {
 130:	0e 94 d7 00 	call	0x1ae	; 0x1ae <TWIGetStatus>
 134:	80 36       	cpi	r24, 0x60	; 96
 136:	21 f4       	brne	.+8      	; 0x140 <__vector_24+0x32>
        my_twi_address = TWDR0;
 138:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 13c:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <my_twi_address>
    }
    
    // data receive successful
    if( TWIGetStatus() == TW_SR_DATA_ACK ){
 140:	0e 94 d7 00 	call	0x1ae	; 0x1ae <TWIGetStatus>
 144:	80 38       	cpi	r24, 0x80	; 128
 146:	21 f4       	brne	.+8      	; 0x150 <__vector_24+0x42>
        uint8_t mem_addr = TWDR0;
 148:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
        next_byte_to_transmit = mem_addr;//(mem_addr < buffer_size) ? buffer[mem_addr] : 255;
 14c:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <next_byte_to_transmit>
    }
    
    // device has been addressed to be a transmitter
    if( TWIGetStatus() == TW_ST_DATA_ACK ){
 150:	0e 94 d7 00 	call	0x1ae	; 0x1ae <TWIGetStatus>
 154:	88 3b       	cpi	r24, 0xB8	; 184
 156:	21 f4       	brne	.+8      	; 0x160 <__vector_24+0x52>
        TWDR0 = next_byte_to_transmit;
 158:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <next_byte_to_transmit>
 15c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    }

    // if none of the above apply prepare TWI to be addressed again
    TWCR0 = (1<<TWIE) | (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
 160:	85 ec       	ldi	r24, 0xC5	; 197
 162:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

    //TWCR0 = (1<<TWIE) | (1<<TWEA) | (1<<TWEN);
}
 166:	ff 91       	pop	r31
 168:	ef 91       	pop	r30
 16a:	bf 91       	pop	r27
 16c:	af 91       	pop	r26
 16e:	9f 91       	pop	r25
 170:	8f 91       	pop	r24
 172:	7f 91       	pop	r23
 174:	6f 91       	pop	r22
 176:	5f 91       	pop	r21
 178:	4f 91       	pop	r20
 17a:	3f 91       	pop	r19
 17c:	2f 91       	pop	r18
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <main>:


int main(void) {
    configure();
 188:	0e 94 79 00 	call	0xf2	; 0xf2 <configure>
}
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	08 95       	ret

00000192 <TWISlaveInit>:

uint8_t TWIMasterReadNACK() {
    TWCR0 = (1<<TWINT)|(1<<TWEN);
    while ((TWCR0 & (1<<TWINT)) == 0);
    return TWDR0;
}
 192:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 196:	90 e2       	ldi	r25, 0x20	; 32
 198:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 19c:	88 0f       	add	r24, r24
 19e:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
 1a2:	60 93 bd 00 	sts	0x00BD, r22	; 0x8000bd <__TEXT_REGION_LENGTH__+0x7e00bd>
 1a6:	85 ec       	ldi	r24, 0xC5	; 197
 1a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1ac:	08 95       	ret

000001ae <TWIGetStatus>:

uint8_t TWIGetStatus() {
    return TWSR0 & 0xF8;
 1ae:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
}
 1b2:	88 7f       	andi	r24, 0xF8	; 248
 1b4:	08 95       	ret

000001b6 <TWISetBuffer>:

void TWISetBuffer(uint8_t *buffer_, uint8_t buffer_size_) {
    buffer_size = buffer_size_;
 1b6:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <buffer_size>
    buffer = buffer_;
 1ba:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <__data_end+0x1>
 1be:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>
 1c2:	08 95       	ret

000001c4 <_exit>:
 1c4:	f8 94       	cli

000001c6 <__stop_program>:
 1c6:	ff cf       	rjmp	.-2      	; 0x1c6 <__stop_program>
